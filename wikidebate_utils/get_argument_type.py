import mwparserfromhell


LIST_OF_EXCEPTION = ['Are humans omnivores or herbivores?',
                     'Are medical doctors arrogant?',
                     'Is access date for online references and links worth providing?',
                     'Is bitcoin a good investment?',
                     'Is slavery good?',
                     'Is the output of ChatGPT copyrighted?',
                     'Should abortion be legal?',
                     'Should infanticide be legal?',
                     'Should non-practitioners avoid criticising practitioners?',
                     'Should Wikipedia administrators be required to cite offending diffs when they indefinitely block an account?',
                     'Should Wikipedia editors always provide an edit summary?',
                     'Should Wikiversity allow editors to post content generated by LLMs?',
                     'Should Wiktionary have topical categories?',
                     'Should Wiktionary votes cast be required to have a rationale?']


def get_arguemnt_type_labels(section,items,section_label):
   
    j=0
    levels=[]
    objection_flags=[]
    objection_label=0
    count=0
    templates=['{{argument for}}','{{argument against}}','{{objection}}','{{comment}}' ]
    args_and_objs=[node.lower() for node in section.filter_templates() if node.lower() in templates]
    for node in section.nodes:
        # print(node)
        # print(f"j is :{j}")
        # print(node)
        if node == '\n' or node == '\n\n':
            continue
        if node == '*':
            count+=1
            continue
        if node.lower() in args_and_objs or node.lstrip().lower().startswith('comment') or node=="''Comment''":
            if node.lower()=='{{objection}}': 
                #print("recognized objection")
                objection_label=1
            if node.lower()=='{{comment}}' or node.lstrip().lower().startswith('comment') or node=="''Comment''":
                objection_label=2
            if node.lower()=='{{argument for}}' or node.lower()=='{{argument against}}':
                #print("recognized argument")
                objection_label=0
            
            
            levels.append(count)
            objection_flags.append(objection_label)
            #print(f"{item[:30]} recognized as {objection_label}")
            objection_label=0
            count=0
            j+=1
        if j>=len(items):
            break
    return objection_flags,levels


def manage_exception(items,title, LIST_OF_EXCEPTION):
    if title == LIST_OF_EXCEPTION[1]:
        items[9:11]=[''.join(items[9:11])]
    if title == LIST_OF_EXCEPTION[5]:
        items[0:5]=[''.join(items[0:5])]
    if title == LIST_OF_EXCEPTION[9]:
        items.pop(-1)
    if title == LIST_OF_EXCEPTION[13]:
        items.pop(-1)
    return items

def get_string_type(obj_tot):
    type_of_item=[]
    for elem in obj_tot:
        if elem==0:
            type_of_item.append("Argument")
        if elem==1:
            type_of_item.append("objection")
        if elem==2:
            type_of_item.append("Comment")
    return type_of_item